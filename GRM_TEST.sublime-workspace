{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"background-c",
				"background-color"
			],
			[
				"border",
				"border-style"
			],
			[
				"has",
				"hasOwnProperty"
			],
			[
				"poin",
				"point_info"
			],
			[
				"selec",
				"select_point"
			],
			[
				"set",
				"setIcon"
			],
			[
				"track",
				"track_index"
			],
			[
				"line",
				"line_num"
			],
			[
				"from",
				"from_route"
			],
			[
				"marke",
				"marker_index"
			],
			[
				"sto",
				"stop_markers"
			],
			[
				"mar",
				"marker_index"
			],
			[
				"track_po",
				"track_point"
			],
			[
				"w",
				"InfoWindow"
			],
			[
				"all",
				"all_markers"
			],
			[
				"menu",
				"menu-custom-item"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app/client/main.html",
			"settings":
			{
				"buffer_size": 4111,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "'use strict';\n\n/* Directives */\n\n\n/**\n * @ngdoc directive\n * @name bfAngularApp.packagesHandler\n * @requires PackagesFactory\n * @description\n *   This directive generates a box with all the necessary items to CRUD the packages for the billing\n *\n * @example\n * Usage:\n *      <div packages-handler></div>\n */\n\nbfAngularApp.compileProvider.directive('packagesHandler',\n  ['PackagesFactory', 'BundlesFactory', '$modal', 'growl', 'OAuth',\n  function (PackagesFactory, BundlesFactory, $modal, growl, OAuth) {\n\n    return {\n        restrict    : 'A',\n        replace     : true,\n        templateUrl : bfAngularApp.bfAppConfig.bfHtmlFolder + 'components/packages/views/packages-handler.html',\n        scope       : {\n        },\n        link: function($scope, element, attr) {\n          var self = this;\n          $scope.packagesList = [];\n          $scope.bundlesList = [];\n\n          // Link the authorisation function\n          $scope.isUserAuthorised = function (permission, minLevel) {\n            return bfAngularApp.isUserAuthorised(OAuth, permission, minLevel);\n          };\n\n          // Load all the packages\n          if ($scope.isUserAuthorised('billing_packages.read')) {\n            PackagesFactory.query({}, function(data) {\n                if (data.hasOwnProperty('packages')) {\n                  $scope.packagesList = data.packages;\n                }\n            });\n          }\n\n          // Load all the bundles\n          if ($scope.isUserAuthorised('billing_bundles.read')) {\n            BundlesFactory.query({}, function(data) {\n                if (data.hasOwnProperty('bundles')) {\n                  $scope.bundlesList = data.bundles;\n                }\n            });\n          }\n\n\n          // Object to handle actions (add / edit / delete) to one item of the list\n          $scope.itemHandler = (function() {\n            var itemHandler = {};\n\n            itemHandler.billingPackage = {}; // Object to edit / add / delete\n            itemHandler.availableBundles = [];  // List with the possible bundles to add to the package\n\n            itemHandler.setNewPackageBundle = function(bundle, $item) {\n              itemHandler.newPackageBundle.id = $item.id;\n            }\n\n            // Move the tariff from \"availableBundles[]\" to \"billingPackage.bundles[]\"\n            itemHandler.addPackageBundle = function() {\n              var selectedBundle = bfAngularApp.getElementFromArrayByProperty(this.availableBundles, 'id', itemHandler.newPackageBundle.id);\n              if (selectedBundle) {\n\n                var newPackageBundle = this.newPackageBundle;\n\n                // Add the bundle to the package\n                PackagesFactory.addBundle(\n                  { package_id: this.billingPackage.id,\n                    id: newPackageBundle.id\n                  },\n                  function(data) {\n\n                    // Check if it is already in the array\n                    if (!bfAngularApp.isElementInArrayByProperty($scope.itemHandler.billingPackage.bundles, 'id', newPackageBundle.id)) {\n                      $scope.itemHandler.billingPackage.bundles.push(newPackageBundle);\n                    }\n\n                    // Remove the bundle from the available bundles list\n                    var ind = $scope.itemHandler.availableBundles.indexOf(selectedBundle);\n                    if (ind >= 0) {\n                      $scope.itemHandler.availableBundles.splice(ind, 1);\n                    }\n                    $scope.itemHandler.newPackageBundle = null;\n                    growl.success('scripts.packages.controllers.bundle_successfully_linked');\n                  }\n                );\n              }\n            };\n\n            // Add the removed bundle in \"billingPackage.bundles[]\" to \"availableBundles[]\" again\n            itemHandler.unlinkBundle = function(bundle) {\n\n              var selectedBundle = bundle;\n\n              PackagesFactory.removeBundle(\n                { package_id: $scope.itemHandler.billingPackage.id,\n                  verbId: bundle.id\n                },\n                function(data) {\n                  var ind = $scope.itemHandler.billingPackage.bundles.indexOf(selectedBundle);\n                  if (ind >= 0) {\n                    $scope.itemHandler.billingPackage.bundles.splice(ind, 1); // Delete the item from the list\n                    growl.success('scripts.packages.controllers.bundle_successfully_unlinked');\n\n                    $scope.itemHandler.availableBundles.push(selectedBundle); // Add the item into the available bundles list\n\n                    // If the package has no bundle, it cannot be active (set it as inactive automatically)\n                    if ($scope.itemHandler.billingPackage.bundles.length == 0 && $scope.itemHandler.billingPackage.active) {\n\n                      PackagesFactory.save(\n                        { id     : $scope.itemHandler.billingPackage.id,\n                          active : false\n                        },\n                        function(data) {\n                          $scope.itemHandler.billingPackage.active = false;\n                          $scope.itemHandler.listItemReference.active = false;\n                          growl.success('scripts.packages.controllers.billing_package_successfully_modified');\n                        }\n                      );\n                    }\n\n                  }\n                }\n              );\n            };\n\n            // Show the right panel ready to add a new billingPackage\n            itemHandler.showAddPanel = function() {\n              $scope.task = 'add';\n              $scope.billingPackageForm.$setPristine();\n              $scope.billingPackageForm.$setUntouched();\n              this.billingPackage = {};\n              // Default values for the new item\n              this.billingPackage.active = false;\n              this.billingPackage.bundles = [];\n              this.availableBundles = angular.copy($scope.bundlesList);\n            };\n\n            // Expand/collapse the tariffs sublist\n            itemHandler.toggleBundleTariffs = function(bundle) {\n              bundle.isCollapsed = !bundle.isCollapsed;\n\n              // Load the tariffs of the bundle (the first time the list is shown)\n              if (!bundle.tariffs) {\n                var selectedBundle = bundle;\n                BundlesFactory.getTariffs({ bundle_id: bundle.id }, function(data) {\n                  selectedBundle.tariffs = data.tariffs;\n                });\n              }\n\n            };\n\n            // Open the popup to show the tariff details\n            itemHandler.showTariffRefs = function(tariff) {\n              $modal.open({\n                scope       : $scope,\n                animation   : true,\n                templateUrl : bfAngularApp.bfAppConfig.bfHtmlFolder + 'components/bundles/views/billing-refs-popup.html',\n                controller  : 'BillingRefsController',\n                size        : 'lg',\n                backdrop    : 'static',\n                resolve     : {\n                  selectedTariff: tariff\n                }\n              });\n            };\n\n            // Show the right panel ready to edit the selected billingPackage\n            itemHandler.showEditPanel = function(billingPackage) {\n              $scope.task = 'edit';\n              this.billingPackage = angular.copy(billingPackage);\n              this.listItemReference = billingPackage;\n\n              var self = this;\n\n              // Load the package.bundles (from the other API)\n              PackagesFactory.getBundles({ package_id: billingPackage.id }, function(data) {\n                self.billingPackage.bundles = data.bundles;\n\n                // Duplicate all the bundles (as available), and then remove the ones which are already into the package\n                self.availableBundles = angular.copy($scope.bundlesList);\n                self.billingPackage.bundles.forEach(function(bundle) {\n                  var availableBundle = bfAngularApp.getElementFromArrayByProperty($scope.itemHandler.availableBundles, 'id', bundle.id);\n                  if (availableBundle) {\n                    bundle.name = availableBundle.name;\n                    bundle.priority = availableBundle.priority;\n                    var ind = $scope.itemHandler.availableBundles.indexOf(availableBundle);\n                    if (ind >= 0) {\n                      $scope.itemHandler.availableBundles.splice(ind, 1);\n                    }\n                  }\n                });\n\n              });\n\n            };\n\n            // Add the billingPackage\n            itemHandler.add = function() {\n              PackagesFactory.create(\n                this.billingPackage,\n                function(data) {\n                  growl.success('scripts.packages.controllers.billing_package_successfully_added');\n                  $scope.itemHandler.billingPackage.id = data.id;\n                  $scope.packagesList.push(angular.copy($scope.itemHandler.billingPackage));\n                  $scope.itemHandler.showEditPanel(bfAngularApp.getElementFromArrayByProperty($scope.packagesList, 'id', $scope.itemHandler.billingPackage.id));\n                }\n              );\n            };\n\n            // Delete the billingPackage\n            itemHandler.remove = function() {\n              PackagesFactory.delete({package_id: $scope.itemHandler.billingPackage.id}, function() {\n                growl.success('scripts.packages.controllers.billing_package_successfully_deleted');\n                var ind = $scope.packagesList.indexOf($scope.itemHandler.listItemReference);\n                if (ind >= 0) {\n                  $scope.packagesList.splice(ind, 1);\n                }\n                $scope.itemHandler.cancel();\n              });\n            };\n\n            // Update the billingPackage\n            itemHandler.update = function() {\n              PackagesFactory.save(\n                this.billingPackage,\n                function(data) {\n                  growl.success('scripts.packages.controllers.billing_package_successfully_modified');\n                  angular.extend($scope.itemHandler.listItemReference, angular.copy($scope.itemHandler.billingPackage));    // Set the modified values into the list\n                  $scope.billingPackageForm.$setPristine();\n                }\n              );\n            };\n\n            itemHandler.cancel = function() {\n              $scope.task = '';\n              $scope.itemHandler.billingPackage = {};\n            }\n\n            return itemHandler;\n\n          }());\n\n        } // End link function\n    };\n}]);\n\n\n\n/**\n * @ngdoc directive\n * @name bfAngularApp.customerPackagesHandler\n * @requires CustomerPackagesFactory\n * @description\n *   This directive generates a box with all the necessary items to CRUD the customerPackages for the packages\n *\n * @example\n * Usage:\n *      <div customer-packages-handler></div>\n */\n\nbfAngularApp.compileProvider.directive('customerPackagesHandler',\n  ['CustomerPackagesFactory', 'DatePickerSettings', '$modal', 'growl', 'OAuth', 'Customer',\n  function (CustomerPackagesFactory, DatePickerSettings, $modal, growl, OAuth, Customer) {\n\n    return {\n        restrict    : 'A',\n        replace     : true,\n        templateUrl : bfAngularApp.bfAppConfig.bfHtmlFolder + 'components/packages/views/customer-packages-handler.html',\n        scope       : {\n        },\n        link: function($scope, element, attr) {\n          var self = this;\n          $scope.customersList = [];\n          $scope.customerPackagesList = [];\n\n          // Link the authorisation function\n          $scope.isUserAuthorised = function (permission, minLevel) {\n            return bfAngularApp.isUserAuthorised(OAuth, permission, minLevel);\n          };\n\n          // Load all the costumers\n          if ($scope.isUserAuthorised('customers.read')) {\n            Customer.query({}, function(data) {\n              if (data.hasOwnProperty('customers')) {\n                $scope.customersList = data.customers;\n              }\n            });\n          }\n\n          // Function to select a customer\n          $scope.changeSelectedCustomer = function(selected) {\n            $scope.selectedCustomer = selected;\n\n            // Load all the customerPackages (once the customer is selected)\n            if ($scope.isUserAuthorised('packages.read', 'whiteLabel')) {\n              CustomerPackagesFactory.query({ customer_id: $scope.selectedCustomer.id }, function(data) {\n                if (data.hasOwnProperty('packages')) {\n                  $scope.customerPackagesList = data.packages;\n                  $scope.customerPackagesList.forEach(function(item) {  // We need a not nested property to search by in the filter\n                    item.billing_package_name = item.billing_package.name;\n                  });\n                }\n              });\n            };\n          };\n\n          // Select the profile customer by default\n          $scope.changeSelectedCustomer(OAuth.profile.customer);\n\n\n          $scope.datePickerStartDate = new DatePickerSettings();\n          $scope.datePickerEndDate = new DatePickerSettings();\n\n          // Object to handle actions (add / edit / delete) to one item of the list\n          $scope.itemHandler = (function() {\n            var itemHandler = {};\n\n            itemHandler.customerPackage = {}; // Object to edit / add / delete\n\n            // Toggle collapsed to a list item\n            itemHandler.toggleListItem = function(customerPackage) {\n              if (customerPackage.isOpened) {\n                this.hideListItem(customerPackage);\n              } else {\n                this.showListItem(customerPackage);\n              }\n            };\n\n            // Expand a list item to show its details\n            itemHandler.showListItem = function(customerPackage) {\n\n              // Collapse all others items of the list\n              $scope.customerPackagesPageList.forEach(function(item) {\n                item.isOpened = false;\n              });\n              customerPackage.isOpened = true;\n\n              $scope.task = 'edit';\n              this.customerPackage = angular.copy(customerPackage);\n              this.listItemReference = customerPackage;\n\n              $scope.datePickerStartDate.setStrValue(customerPackage.start_date);\n              $scope.datePickerEndDate.setStrValue(customerPackage.end_date);\n\n            };\n\n            // Collapse a list item to hide its details\n            itemHandler.hideListItem = function(customerPackage) {\n              customerPackage.isOpened = false;\n              $scope.task = '';\n            };\n\n\n            // Launch the modal to add new customerPackage\n            itemHandler.showAddPanel = function() {\n              $modal.open({\n                scope       : $scope,\n                animation   : true,\n                templateUrl : bfAngularApp.bfAppConfig.bfHtmlFolder + 'components/packages/views/customer-packages-add-popup.html',\n                controller  : 'AddCustomerPackageController',\n                size        : 'lg',\n                backdrop    : 'static'\n              });\n            };\n\n            // Delete the customerPackage\n            itemHandler.remove = function() {\n              CustomerPackagesFactory.delete({package_id: $scope.itemHandler.customerPackage.id}, function() {\n                growl.success('scripts.customer_packages.controllers.customer_package_successfully_deleted');\n                var ind = $scope.customerPackagesList.indexOf($scope.itemHandler.listItemReference);\n                if (ind >= 0) {\n                  $scope.customerPackagesList.splice(ind, 1);\n                }\n                $scope.itemHandler.cancel();\n              });\n            };\n\n            // Update the customerPackage\n            itemHandler.update = function() {\n              itemHandler.customerPackage.start_date = $scope.datePickerStartDate.getStrValue();\n              itemHandler.customerPackage.end_date = $scope.datePickerEndDate.getStrValue();\n              CustomerPackagesFactory.save(\n                this.customerPackage,\n                function(data) {\n                  growl.success('scripts.customer_packages.controllers.customer_package_successfully_modified');\n                  // Update the element into the array list\n                  var ind = $scope.customerPackagesList.indexOf($scope.itemHandler.listItemReference);\n                  if (ind >= 0) {\n                    var listElement = $scope.customerPackagesList[ind];\n                    for(var prop in data) {\n                      if (data.hasOwnProperty(prop)) {\n                        listElement[prop] = data[prop];\n                      }\n                    }\n                  }\n                }\n              );\n            };\n\n            itemHandler.cancel = function() {\n              $scope.task = '';\n              $scope.itemHandler.customerPackage = {};\n            }\n\n            return itemHandler;\n\n          }());\n\n\n        } // End link function\n    };\n}]);\n\n\n\n\n\n// Controllers for the modals:\n\nbfAngularApp.controllerProvider.register('AddCustomerPackageController',\n  ['$scope', '$modalInstance', 'growl', 'CustomerPackagesFactory', 'PackagesFactory', 'DatePickerSettings', '$timeout',\n  function($scope, $modalInstance, growl, CustomerPackagesFactory, PackagesFactory, DatePickerSettings, $timeout) {\n    var self = this;\n    $scope.billingPackages = [];\n    $scope.task = 'add';\n\n    $scope.newCustomerPackage = {};\n    $scope.newCustomerPackage.customer_id = $scope.selectedCustomer.id;\n    $scope.newCustomerPackage.active = true;\n\n    $scope.dpNewStartDate = new DatePickerSettings();\n    $scope.dpNewEndDate = new DatePickerSettings();\n\n    // Load all the packages\n    if ($scope.isUserAuthorised('billing_packages.read', 'whiteLabel')) {\n      PackagesFactory.query({}, function(data) {\n          if (data.hasOwnProperty('packages')) {\n\n            // Insert into the \"possible new ones list\" only those that aren't in the customerPackages already\n//            $scope.billingPackages = [];\n//            data.packages.forEach(function(item) {\n//              var alreadyExists = false;\n//              for (var t = 0; t < $scope.customerPackagesList.length; t++) {\n//                if ($scope.customerPackagesList[t].billing_package.id === item.id) {\n//                  alreadyExists = true;\n//                }\n//              }\n//              if (!alreadyExists) {\n//                $scope.billingPackages.push(item);\n//              };\n//            });\n\n            // You can add the same package many times (with different values) so the code above is not necessary\n            $scope.billingPackages = data.packages;\n          }\n      });\n    }\n\n    $scope.changeSelectedPackage = function(selected) {\n      $scope.newCustomerPackage.billing_package = selected;\n    };\n\n    $scope.add = function() {\n      CustomerPackagesFactory.create(\n        $scope.newCustomerPackage,\n        function(data) {\n          $scope.customerPackagesList.push(data);\n          growl.success('scripts.customer_packages.controllers.customer_package_successfully_added');\n\n          $modalInstance.close();\n\n          // Show the new item expanded in the list\n          $timeout(function() {\n            var selectedListItem = bfAngularApp.getElementFromArrayByProperty($scope.customerPackagesPageList, 'id', data.id);\n            if (selectedListItem) {\n              $scope.itemHandler.showListItem(selectedListItem);\n            }\n          }, 100);\n          // The timeout is a hack, because to trigger the item properly we have to wait after the ngRepeat rendering\n          // We should find a better way to do so.\n          // I've tried with a custom directive (on-finish-render=\"ngRepeatFinished\") testing $last\n          // and with a custom filter (items|ngRepeatFinish)\n          // though they are not working as well as I'd expected\n\n\n        }\n      );\n    };\n\n  }]\n);\n\n",
			"settings":
			{
				"buffer_size": 19852,
				"line_ending": "Unix",
				"name": "'use strict';"
			}
		},
		{
			"file": "app/client/main.js",
			"settings":
			{
				"buffer_size": 3995,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 449.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/GRM_TEST",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/GRM_TEST/app",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/GRM_TEST/app/client",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/GRM_TEST/app/lib"
	],
	"file_history":
	[
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client/dub_bus.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/lib/shared_funs.js",
		"/home/barba/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/media/DISK5/DOCUMENTS/BBDD/historia facebook - 9.12.2010",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/euro2016_table_gen.html",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/EURO2016/EURO2016/DB/user.json",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/EURO2016/EURO2016/DB/backup.json",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/lib/app.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/ENG_TEST/Irregular_verbs_test_jquery.html",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/euro2016.html",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client/map_polylines.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/lib/stop_markers.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client/dub_bus.html",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/ENG_TEST/Irregular_verbs_test.html",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/data_structure.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/server/startup.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/lib/bus_tracks_data_ini.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client/templates/menu_left.js",
		"/media/DISK5/DOCUMENTS/BBDD/tmp.txt",
		"/home/barba/Desktop/EMIGRATION_INFO/plan.txt",
		"/home/barba/Desktop/ENGLISH RIPS/Formal Reports & Proposals.url",
		"/media/DISK5/DOCUMENTS/BBDD/ctbl.txt",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/lib/bus_stops_data_ini.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/lib/collections.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/settings.json",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client/templates/menu_left.html",
		"/home/barba/Desktop/java_apunts.txt",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/CAT_PELIS/WebApp_AJS/data/insertar_peli.php",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/CAT_PELIS/DB/model_db.sql",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/HtmlVersion/Dublin_BUS_tracker.html",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/Dublin_BUS_tracker.html",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client/stop_markers.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/data_structure.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/data_structure.json",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/data_structure.txt",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client/templates/menu.js",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/lib/menu.js",
		"/home/barba/.config/sublime-text-3/Packages/User/bh_core.sublime-settings",
		"/home/barba/.config/sublime-text-3/Packages/Colorsublime-Plugin-master/Monokai.tmTheme",
		"/home/barba/.config/sublime-text-3/Packages/User/Colorsublime.sublime-settings",
		"/home/barba/.config/sublime-text-3/Packages/Colorsublime/Colorsublime.sublime-settings",
		"/home/barba/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client/app.js"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/server,/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client,/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/lib,/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/public",
			"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client",
			"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/server",
			"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/lib",
			"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus/client",
			"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus",
			"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus,-.git",
			"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/DUB_BUS/MeteorVersion/dub_bus",
			"/media/DISK5/PROGRAMES_PROPIS/APLICACIONS_WEB/CAT_PELIS/WebApp_AJS"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"—",
			"8942251",
			"—",
			"89 422 51",
			"8942251",
			"08942251",
			"mire",
			";\n",
			"if (level == 2) {\n            var prevMatch = numMatch - 1;\n          }\n          ",
			"]]);\n",
			"teams",
			"13",
			"2",
			"27",
			"q2",
			">\");\n",
			">\n",
			"team-col",
			"line-col",
			">\n",
			"1",
			"        <",
			"efectiu",
			",",
			"IE",
			"Beers",
			"Darios",
			"5",
			"-\n",
			"select_stop_point",
			"get_from_track_index_by_id",
			"get_to_track_index_by_id",
			"select_point",
			"delete_point",
			"get_track_by_id",
			"set_track_markers",
			"$set",
			"app.stop_markers",
			"app.map_polylines",
			"map_polylines",
			"shared_funs",
			"app.map_polylines",
			"track.",
			"this",
			"open_stop_infowindow",
			"all-bus-stops",
			"Ok, the library is loaded",
			"bus_tracks",
			"move_point",
			"line_num",
			"abcd",
			"pat = abcd",
			"pat = wxyz",
			"wxyz",
			"get_track_by_num",
			"get_track_by_id",
			"data_replication2",
			"nav",
			"loadLlistaPelis",
			"http",
			"llista_pelis.html",
			"CTRL_llista_pelis",
			"marker_list",
			"show_route",
			"app",
			"open_stop_infowindow",
			"menu",
			"stop_markers",
			"all_markers",
			"this.",
			"this.num",
			"pos",
			";\n",
			"all_markers",
			"temp_mark_info",
			"stop-marler-info-template",
			"open_stop_infowindow",
			"line_num",
			"toogle_stop_show",
			"stop_marker",
			"toogle_stop_show",
			"show_route",
			"console",
			"bus_tracks",
			"// helper function to return all tracks and build the left menu\nTemplate.menu_left.helpers({\n    tracks : function() {\n        return bus_tracks.find();\n    }\n});\n",
			">\n",
			"well",
			"Bracket Curly",
			"color",
			"curl",
			"find"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"team_col",
			"line_col",
			"lines",
			"tracks"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/client/main.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4111,
						"regions":
						{
						},
						"selection":
						[
							[
								2555,
								2555
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 117.0,
						"translation.y": 738.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19852,
						"regions":
						{
						},
						"selection":
						[
							[
								11354,
								11354
							]
						],
						"settings":
						{
							"auto_name": "'use strict';",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4400.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "app/client/main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3995,
						"regions":
						{
						},
						"selection":
						[
							[
								3991,
								3991
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1674.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.47864349896,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "GRM_TEST.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 152.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
